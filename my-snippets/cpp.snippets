# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# Iterators For Loop
snippet forc
	for (${1:ContainterType}::${2:const_iterator} ${3:it} = ${4:container}.${5:begin()}; $3 != ${6:$4.end()}; ${7:++}$3)
		${8:;// code}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:stingray}
	{
		${2}
	}
# Interface
snippet ifc
	struct ${1:`Filename('$1', 'ISomething')`}
	{
		virtual ~$1() { }

		${2:/* methods */}
	};
snippet Ifc
	struct ${1:`Filename('$1', 'ISomething')`}
	{
		virtual ~$1() { }

		${2:/* methods */}
	};
	TOOLKIT_DECLARE_PTR($1);
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`}
	{
	private:
		${3:/* data */}

	public:
		$1(${2:/* arguments */});
	};
snippet Cl
	class ${1:`Filename('$1', 'name')`}
	{
	private:
		${3:/* data */}

	public:
		$1(${2:/* arguments */});
		virtual ~$1();
	};
# Enum class
snippet En
	struct ${1:SomeEnum} {
		TOOLKIT_ENUM_VALUES(${2:Value});
		TOOLKIT_DECLARE_ENUM_CLASS($1);
	};
snippet Srvi
	#include <stingray/toolkit/ServiceProvider.h>


	namespace stingray
	{

		class ${1:`substitute(Filename('$1', 'SomeService'), 'Provider$', '', '')`}Provider : public ServiceProvider<I$1>
		{ };
	
	}
snippet Srvd
	#include <`substitute(Relpath(@%), '.cpp$', '.h', '')`>


	namespace stingray
	{

	#if defined(PLATFORM_${2:EMMA3})
		TOOLKIT_DEFINE_SERVICE_CREATOR(${3:emma3}::$1, new DefaultConstructorCreator<I$1, $3::$1>);
	#else
		TOOLKIT_SERVICE_NOT_SUPPORTED(I${1:`substitute(Filename('$1', 'SomeService'), 'Provider$', '', '')`});
	#endif
	
	}
